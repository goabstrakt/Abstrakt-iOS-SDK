import Foundation
import CoreData
import Persistence
import BigInt
{% for type in types.implementing.VWMQTTModel %}
{# Iterate over all structs that implement VWMQTTModel #}

public class VW{{type.name}}: NSObject, NSCoding {
 {# Iterate over all variables that are not annotated as "ignore" #}
 {% for variable in type.variables|!annotated:"ignore" %}
  {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
  {# The variable implements VWMQTTModel or the variable is an array with elements that implement VWMQTTModel #}
   {% if variable.type.implements.VWMQTTModel %}
   {# The variable implements VWMQTTModel #}
    public var {{variable.name}}: VW{{variable.unwrappedTypeName}}?
   {% endif %}
   {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
    public var {{variable.name}}: [VW{{variable.typeName.array.elementTypeName}}]!
   {% endif %}
  {% else %}
    public var {{variable.name}}: {{variable.unwrappedTypeName}}?
  {% endif %}
 {% endfor %}

     /**
     * Instantiate the instance using the passed dictionary values to set the properties values
     */
     init(fromDictionary dictionary: [String: Any]) {
     {% for variable in type.variables|!annotated:"ignore" %}
     {# Iterate over all variables that are not annotated as "ignore" #}
     {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
     {# The variable implements VWMQTTModel or the variable is an array with elements that implement VWMQTTModel #}
      {% if variable.type.implements.VWMQTTModel %}
      {# The variable implements VWMQTTModel #}
       {% if variable|annotated:"jsonKey" %}
        if let {{variable.name}}Json = dictionary["{{variable.annotations.jsonKey}}"] as? [String: Any] {
       {% else %}
        if let {{variable.name}}Json = dictionary["{{variable.name}}"] as? [String: Any] {
       {% endif %}
            self.{{variable.name}} = VW{{variable.unwrappedTypeName}}(fromDictionary: {{variable.name}}Json)
        } else {
            self.{{variable.name}} = nil
        }
      {% endif %}
      {# The variable is an array with elements that implement VWMQTTModel #}
      {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
        self.{{variable.name}} = [VW{{variable.typeName.array.elementTypeName}}]()
       {% if variable|annotated:"jsonKey" %}
        if let {{variable.name}}Array = dictionary["{{variable.annotations.jsonKey}}"] as? [[String: Any]] {
       {% else %}
        if let {{variable.name}}Array = dictionary["{{variable.name}}"] as? [[String: Any]] {
       {% endif %}
            for dict in {{variable.name}}Array {
                let value = VW{{variable.typeName.array.elementTypeName}}(fromDictionary: dict)
                self.{{variable.name}}.append(value)
            }
        }
      {% endif %}

     {% else %}
      {% if variable.typeName|contains:"Date" or variable.typeName|contains:"Double" %}
      {% if variable.typeName|contains:"Date" %}
      {% if variable|annotated:"jsonKey" %}
        if let tempDate = dictionary["{{variable.annotations.jsonKey}}"] as? Int {
            let date = Date(timeIntervalSince1970: Double(tempDate))
            let dateFormatter = DateFormatter()
            dateFormatter.timeZone = TimeZone(abbreviation: "GMT") //Set timezone that you want
            dateFormatter.locale = Locale(identifier: "en_US")
            dateFormatter.dateFormat = "MM/dd/yy HH:mm"
            let strDate = dateFormatter.string(from: date)
            self.{{variable.name}} = dateFormatter.date(from: strDate)
        }
      {% else %}
        if let tempDate = dictionary["{{variable.name}}"] as? Int {
            let date = Date(timeIntervalSince1970: Double(tempDate))
            let dateFormatter = DateFormatter()
            dateFormatter.timeZone = TimeZone(abbreviation: "GMT") //Set timezone that you want
            dateFormatter.locale = Locale(identifier: "en_US")
            dateFormatter.dateFormat = "MM/dd/yy HH:mm"
            let strDate = dateFormatter.string(from: date)
            self.{{variable.name}} = dateFormatter.date(from: strDate)
        }
      {% endif %}
     {% endif %}
     {% if variable.typeName|contains:"Double" %}
      {% if variable|annotated:"jsonKey" %}
        if let data = dictionary["{{variable.annotations.jsonKey}}"] as? String {
      {% else %}
        if let data = dictionary["{{variable.name}}"] as? String {
      {% endif %}
            self.{{variable.name}} = Double(data) //BigInt(data, radix: 10)
        }
      {% endif %}
      {% else %}
       {% if variable|annotated:"jsonKey" %}
        self.{{variable.name}} = dictionary["{{variable.annotations.jsonKey}}"] as? {{variable.typeName}}
       {% else %}
        self.{{variable.name}} = dictionary["{{variable.name}}"] as? {{variable.typeName}}
       {% endif %}
      {% endif %}
     {% endif %}
     {% endfor %}
    }

    /**
    * Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property
    */
    func toDictionary() -> [String:Any] {
        var dictionary = [String:Any]()

    {% for variable in type.variables|!annotated:"ignore" %}
    {# Iterate over all variables that are not annotated as "ignore" #}
     {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
     {# The variable implements VWMQTTModel or the variable is an array with elements that implement VWMQTTModel #}
      {% if variable.type.implements.VWMQTTModel %}
      {# The variable implements VWMQTTModel #}
        if let dict = self.{{variable.name}}?.toDictionary() {
         {% if variable|annotated:"jsonKey" %}
            dictionary["{{variable.annotations.jsonKey}}"] = dict
         {% else %}
            dictionary["{{variable.name}}"] = dict
         {% endif %}
        }
      {% endif %}
      {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
      {# The variable is an array with elements that implement VWMQTTModel #}
        if {{variable.name}} != nil {
            var dictionaryElements = [[String:Any]]()
            for element in {{variable.name}} {
                dictionaryElements.append(element.toDictionary())
            }
            {% if variable|annotated:"jsonKey" %}
            dictionary["{{variable.annotations.jsonKey}}"] = dictionaryElements
            {% else %}
            dictionary["{{variable.name}}"] = dictionaryElements
            {% endif %}
        }
     {% endif %}
     {% else %}
      {% if variable|annotated:"jsonKey" %}
        dictionary["{{variable.annotations.jsonKey}}"] = {{variable.name}}
      {% else %}
        dictionary["{{variable.name}}"] = {{variable.name}}
      {% endif %}
     {% endif %}
    {% endfor %}

        return dictionary
    }

    /**
    * NSCoding required method.
    * Encodes mode properties into the decoder
    */
    @objc public func encode(with aCoder: NSCoder) {
      {% for variable in type.variables|!annotated:"ignore" %}
      {# Iterate over all variables that are not annotated as "ignore" #}
        if self.{{variable.name}} != nil {
        	aCoder.encode({{variable.name}}, forKey:"{{variable.name}}")
        }
      {% endfor %}
    }

    /**
    * NSCoding required initializer.
    * Fills the data from the passed decoder
    */
    required public init(coder aDecoder: NSCoder) {
     {% for variable in type.variables|!annotated:"ignore" %}
     {# Iterate over all variables that are not annotated as "ignore" #}
      {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
      {# The variable implements VWMQTTModel or the variable is an array with elements that implement VWMQTTModel #}
       {% if variable.type.implements.VWMQTTModel %}
       {# The variable implements VWMQTTModel #}
        self.{{variable.name}} = aDecoder.decodeObject(forKey: "{{variable.name}}") as? VW{{variable.typeName}}
       {% endif %}
       {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
       {# The variable is an array with elements that implement VWMQTTModel #}
        self.{{variable.name}} = aDecoder.decodeObject(forKey: "{{variable.name}}") as? [VW{{variable.typeName.array.elementTypeName}}] ?? []
       {% endif %}
      {% else %}
        self.{{variable.name}} = aDecoder.decodeObject(forKey: "{{variable.name}}") as? {{variable.typeName}}
      {% endif %}
     {% endfor %}
    }
    {% if type|annotated:"coreDataType" %}

    /**
    * Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property
    */
    func toCoreDataDictionary() -> [String:Any] {
        var dictionary = [String:Any]()

    {% for variable in type.variables|!annotated:"ignore" %}
    {# Iterate over all variables that are not annotated as "ignore" #}
      {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
      {# The variable implements VWMQTTModel or the variable is an array with elements that implement VWMQTTModel #}
        {% if variable.type.implements.VWMQTTModel %}
        {# The variable implements VWMQTTModel #}
        if let dict = self.{{variable.name}}?.toCoreDataDictionary() {
          {% if variable|annotated:"coreDataKey" %}
            dictionary["{{variable.annotations.coreDataKey}}"] = dict
          {% else %}
            dictionary["{{variable.name}}"] = dict
          {% endif %}
        }
        {% endif %}
        {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
        {# The variable is an array with elements that implement VWMQTTModel #}
        if {{variable.name}} != nil {
        var dictionaryElements = [[String:Any]]()
        for element in {{variable.name}} {
            dictionaryElements.append(element.toCoreDataDictionary())
        }
          {% if variable|annotated:"coreDataKey" %}
        dictionary["{{variable.annotations.coreDataKey}}"] = dictionaryElements
          {% else %}
        dictionary["{{variable.name}}"] = dictionaryElements
          {% endif %}
        }
        {% endif %}
        {% else %}
          {% if variable|annotated:"coreDataKey" %}
        dictionary["{{variable.annotations.coreDataKey}}"] = {{variable.name}}
          {% else %}
        dictionary["{{variable.name}}"] = {{variable.name}}
          {% endif %}
        {% endif %}
      {% endfor %}

        return dictionary
    }

    /**
    * Stores the data in the model to core data instance
    */
    public func writeToDisk() -> Bool {
        //TODO: - Shift to background thread for performance optimization?
        if let entity = NSEntityDescription.entity(forEntityName: "{{type.annotations.coreDataType}}", in: OfflineStorage.shared.getContext()) {
            let data = NSManagedObject(entity: entity, insertInto: OfflineStorage.shared.getContext())

          {% for variable in type.variables|annotated:"coreDataKey" %}
          {# Iterate over all variables that have "coreDataKey" annotation #}
          {% if variable.type.implements.VWMQTTModel or variable.typeName.array.elementType.implements.VWMQTTModel %}
            {% if variable.type.implements.VWMQTTModel %}
              {# The variable implements VWMQTTModel #}
              if let _{{variable.name}} = self.{{variable.name}} {
                  let dict = _{{variable.name}}.toCoreDataDictionary()
                  data.setValue(dict, forKey:"{{variable.annotations.coreDataKey}}")
              }
            {% endif %}
            {% if variable.typeName.array.elementType.implements.VWMQTTModel %}
              {# The variable implements VWMQTTModel #}
              if let _{{variable.name}} = self.{{variable.name}} {
                var dictionaryElements = [[String:Any]]()
                for element in _{{variable.name}} {
                    dictionaryElements.append(element.toCoreDataDictionary())
                }
                data.setValue(dictionaryElements, forKey:"{{variable.annotations.coreDataKey}}")
            }
            {% endif %}
            {% else %}
              if let _{{variable.name}} = self.{{variable.name}} {
                  data.setValue(_{{variable.name}}, forKey:"{{variable.annotations.coreDataKey}}")
              }
          {% endif %}
          {% endfor %}
        }

        return OfflineStorage.shared.saveContext()
    }
    {% endif %}
}
{% endfor %}
